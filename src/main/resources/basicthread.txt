CPU核心数和线程数的关系
核心数:线程数=1:1; 使用了超线程技术后---> 1:2

CPU时间片轮转机制
又称RR调度，会导致上下文切换

什么是进程和线程
进程：程序运行资源分配的最小单位，进程内部有多个线程，会共享这个进程的资源
线程：CPU调度的最小单位，必须依赖进程而存在。

澄清并行和并发
并行：同一时刻，可以同时处理事情的能力
并发：与单位时间相关，在单位时间内可以处理事情的能力

高并发编程的意义、好处和注意事项
好处：充分利用cpu的资源、加快用户响应的时间，程序模块化，异步化
问题：
线程共享资源，存在冲突；
容易导致死锁；
启用太多的线程，就有搞垮机器的可能

------------------------------------------------------------------------------------------------------------------------

新启线程的方式
三种

线程安全停止工作的正确方式
线程自然终止：自然执行完或抛出未处理异常
stop()，resume(),suspend()已不建议使用，stop()会导致线程不会正确释放资源，suspend()容易导致死锁。
java线程是协作式，而非抢占式调用一个线程的interrupt() 方法中断一个线程，并不是强行关闭这个线程，只是跟
这个线程打个招呼，将线程的中断标志位置为true，线程是否中断，由线程本身决定。isInterrupted() 判定当前
线程是否处于中断状态。static方法interrupted() 判定当前线程是否处于中断状态，同时中断标志位改为false。
方法里如果抛出InterruptedException，线程的中断标志位会被复位成false，若需要中断线程，在catch语句块
里再次调用interrupt()。

------------------------------------------------------------------------------------------------------------------------

线程常用方法和线程的状态
线程只有5种状态。整个生命周期就是这几种状态的切换。
run()和start() ：run方法就是普通对象的普通方法，只有调用了start()后，Java才会将线程对象和操作系统中
实际的线程进行映射，再来执行run方法。

yield() ：让出cpu的执行权，将线程从运行转到可运行状态，但是下个时间片，该线程依然有可能被再次选中运行。
线程的优先级

取值为1~10，缺省为5，但线程的优先级不可靠，不建议作为线程开发时候的手段

守护线程
和主线程共死，finally不能保证一定执行